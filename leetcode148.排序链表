给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。

##从顶向下

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def sortFunc(head:ListNode,tail:ListNode):
            if not head:
               return head
            if head.next==tail:
               head.next=None
               return head ###递归的终止条件是链表为空，或链表中只有一个节点
            slow=fast=head
            while fast!=slow
                slow=slow.next
                fast=fast.next
                if fast!=tail:
                   fast=fast.next
                mid=slow
            return sortFunc(merged(head,min),merged(mid,tail))##这里递归拆分链表


      ##这是把拆分后的链表拼接起来，拼接的时候排序
        def merged(head1:ListNode,head2:ListNode):
            dummyHead=ListNode(0)
            tmp,tmp1,tmp2=dummyHead,head1,head2
            while tmp1 and tmp2:
                if tmp1.val<=tmp2.val:
                   tmp.next=tmp1
                   tmp1=tmp1.next
                else:
                   tmp.next=tmp2
                   tmp2=tmp2.next
                tmp=tmp.next
            if tmp1:##如果链表head1或链表head2还有没拍完序的，就直接添加在tmp后面
                tmp.next=tmp1
            if tmp2:
                tmp.next=tmp2
            return dummyHead.next
        return sortFunc(head,None)