给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

注意：解集不能包含重复的组合。 




#####组合问题，要求不重复，就需要按 顺序 搜索
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(begin,size,residue):
        if residue==0:
            res.append(path)
            return
        for index in range(begin,size):
            if residue<0:
               break
            if index>begin and candidates[index]==candidates[index-1]:
               continue
            path.append(candidates[index])
            dfs(index+1,size,residue-candidates[index])
            path.pop()
        size=len(candidates)
        if size==0:
           return[]
        candidates.sort()
        res=[]
        path=[]
        dfs(0,size,target)
        return res
####将数组先排序的思路来自于这个问题：去掉一个数组中重复的元素。
很容易想到的方案是：先对数组 升序 排序，重复的元素一定不是排好序以后相同的连续数组区域的第 1 个元素。
也就是说，剪枝发生在：同一层数值相同的结点第 2、3 ... 个结点，
因为数值相同的第 1 个结点已经搜索出了包含了这个数值的全部结果，同一层的其它结点，候选数的个数更少，搜索出的结果一定不会比第 1 个结点更多，并且是第 1个结点的子集。
##同一层后面的候选组合全是第一个的真子集



这个避免重复当思想是在是太重要了。
这个方法最重要的作用是，可以让同一层级，不出现相同的元素。即
                  1
                 / \
                2   2  这种情况不会发生 但是却允许了不同层级之间的重复即：
               /     \
              5       5      ####“在一个for循环中，所有被遍历到的数都是属于一个层级的” 这句是核心，谢谢
                例2
                  1           #例1中 即index>begin and candidates[index]==candidates[index-1]，这样的候选答案是重复的，不能要，所以就continue直接跳过
                 /
                2      这种情况确是允许的
               /
              2  
                
为何会有这种神奇的效果呢？
首先 cur-1 == cur 是用于判定当前元素是否和之前元素相同的语句。这个语句就能砍掉例1。
可是问题来了，如果把所有当前与之前一个元素相同的都砍掉，那么例二的情况也会消失。 
因为当第二个2出现的时候，他就和前一个2相同了。
                
那么如何保留例2呢？
那么就用cur > begin 来避免这种情况，你发现例1中的两个2是处在同一个层级上的，
例2的两个2是处在不同层级上的。
在一个for循环中，所有被遍历到的数都是属于一个层级的。我们要让一个层级中，
必须出现且只出现一个2，那么就放过第一个出现重复的2，但不放过后面出现的2。
第一个出现的2的特点就是 cur == begin. 第二个出现的2 特点是cur > begin.