1038.把二叉搜索树转换为累加树
给定一个二叉搜索树，请将它的每个节点的值替换成树中大于或者等于该节点值的所有节点值之和。
提醒一下，二叉搜索树满足下列约束条件：

节点的左子树仅包含键 小于 节点键的节点。
节点的右子树仅包含键 大于 节点键的节点。
左右子树也必须是二叉搜索树。

###二叉搜索树的中序遍历是递增序列，如果对反序的中序遍历，求累加和，则能得到每个节点处比当前节点大于或者等于的所有节点值之和

##先递归右子树，每个节点值都比当前值大，累加到total中
##再处理当前节点，将右子树的total值传给当前节点，更新当前节点值
##递归左子树



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstToGst(self, root: TreeNode) -> TreeNode:
        def dfs(root:TreeNode):
            nonlocal total
            if root:
                dfs(root.right)
                total += root.val
                root.val=total
                dfs(root.left)
        
        total=0
        dfs(root)
        return root