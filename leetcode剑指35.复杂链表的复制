剑指 Offer 35. 复杂链表的复制
请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。


输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head: return
        ##1.拼接链表 
        cur=head
        while cur:
            tmp=Node(cur.val)
            tmp.next=cur.next
            cur.next=tmp
            cur=tmp.next
        ##构建random指向
        cur=head
        while cur:
              if cur.random:
                 cur.next.random=cur.random.next
              cur=cur.next.next
        ##拆分两链表
        cur=res=head.next
        pre=head
        while cur.next:
              pre.next=pre.next.next
              cur.next=cur=next.next
              cur=cur.next
              pre=pre.next
        pre.next=None # 单独处理原链表尾节点
        return res
              
              
