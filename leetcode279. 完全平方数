279. 完全平方数
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

class Solution:
    def numSquares(self, n: int) -> int:
    f=[(float("inf))]*(n+1)
    f[0]=1
    for i in range(1,n+1):
        i_sqrt=i**0.5
        j=1
        while j<=i_sqrt:
           f[i]=min(f[i],f[i-j*j]+1)
           j += 1
    return f[n]


我们可以依据题目的要求写出状态表达式：f[i]
f[i] 表示最少需要多少个数的平方来表示整数 i。

这些数必然落在区间 [1,\sqrt{n}][1, 
n
​
 ]。我们可以枚举这些数，假设当前枚举到 jj，那么我们还需要取若干数的平方，构成 i-j^2i−j 
2
 。此时我们发现该子问题和原问题类似，只是规模变小了。这符合了动态规划的要求，于是我们可以写出状态转移方程。
