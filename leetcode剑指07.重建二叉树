剑指07.重建二叉树
输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。

假设输入的前序遍历和中序遍历的结果中都不含重复的数字。

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def mybuildtree(preorder_left:int,preorder_right:int,inorder_left:int,inorder_right:int):
            if preorder_right>preorder_right:
                return None
            preorder_root=preorder_left
            ##在中序遍历中定位根节点
            inorder_root=index[preorder[preorder_root]]
            ##确定左子树的长度，左子树的长度确定后，右子树叶随之确定了
            sub_size_leftofinorder=inorder_root-inorder_left

            root=TreeNode(preorder[preorder_root])##建立根结点
            #递归的构造左子树，并连接到根节点
            root.left=mybuildtree(preorder_root+1,preorder_root+sub_size_leftofinorder,inorder_left,inorder_root-1)
            #递归的构造右子树，并连接到根节点
            root.right=mybuildtree(preorder_root+sub_size_leftofinorder+1,preorder_right,inorder_root+1,inorder_right)
            return root

         # 构造哈希映射，帮助我们找到根节点在中序遍历里的对应下标值
        index={element:i for i,element in enumerate(inorder)}
        n=len(preorder)
        return mybuildtree(0,n-1,0,n-1)