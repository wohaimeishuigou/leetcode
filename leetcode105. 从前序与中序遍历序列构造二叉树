
105. 从前序与中序遍历序列构造二叉树

给定一棵树的前序遍历 preorder 与中序遍历  inorder。请构造二叉树并返回其根节点。

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def mybuildTree(preorder_left:int,preorder_right:int,inorder_left:int,inorder_right:int):
            if preorder_left>preorder_right:
               return None
            preorder_root=preorder_left
            inorder_root=index[preorder[preorder_root]]

            sub_left_size=inorder_root-inorder_left
            root=TreeNode(preorder[preorder_root])
            root.left=mybuildTree(preorder_left+1,preorder_left+sub_left_size,inorder_left,inorder_root-1)
            root.right=mybuildTree(preorder_left+sub_left_size+1,preorder_right,inorder_root+1,inorder_right)
            return root



        index={element:i for i,element in enumerate(inorder)}
        n=len(preorder)
        return mybuildTree(0,n-1,0,n-1)
####根据前序遍历和中序遍历的特点，先由前序遍历序列确定根节点，然后构造哈希映射，找到中序遍历序列中中根节点的位置返回其索引
##那么，由中序遍历序列中根结点的位置，可以确定左子树的节点数目，即inorder_root-inorder_left，相应的，可以在前序遍历序列中确定左子树的范围，
两个序列中右子树的范围也可以确定
接下来，递归即可