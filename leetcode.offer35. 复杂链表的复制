剑指 Offer 35. 复杂链表的复制
请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。


"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:return 
        ##复制原链表各节点生成新链表，并与原链表拼接
        cur=head
        while cur:
            tmp=Node(cur.val)
            tmp.next=cur.next#先找到tmp的下一个节点
            cur.next=tmp#再将tmp和其前驱结点连接上
            cur=tmp.next
        #构建各新节点的random指向
        cur=head
        while cur:
            if cur.random:
                cur.next.random=cur.random.next
            cur=cur.next
        #拆分两链表
        pre=head#pre指的是原链表
        cur=res=head.next##res指向新链表。若是res指向原链表，则提交无法通过
        while cur.next:
            pre.next=pre.next.next
            cur.next=cur.next.next
            pre=pre.next##代表已经找到新链表的最后一个节点，即找到了尾结点，此时pre也找到了原链表的尾结点，所以可以结束循环了
            cur=cur.next
        pre.next=None#单独处理原链表尾结点
        return res##返回新链表的头结点
            
