给你一个大小为 m x n 的整数矩阵 grid ，表示一个网格。另给你三个整数 row、col 和 color 。网格中的每个值表示该位置处的网格块的颜色。

当两个网格块的颜色相同，而且在四个方向中任意一个方向上相邻时，它们属于同一 连通分量 。

连通分量的边界 是指连通分量中的所有与不在分量中的网格块相邻（四个方向上）的所有网格块，或者在网格的边界上（第一行/列或最后一行/列）的所有网格块。

请你使用指定颜色 color 为所有包含网格块 grid[row][col] 的 连通分量的边界 进行着色，并返回最终的网格 grid 。


###dfs

class Solution:
    def colorBorder(self, grid: List[List[int]], row: int, col: int, color: int) -> List[List[int]]:
         m,n=len(grid),len(grid[0])
         visited=[[False]*n for _ in range(m)]
         border=[]
         originalColor=grid[row][col]
         self.dfs(grid,row,col,border,visited,originalColor)
         for x,y in border:
              grid[x][y]=color
         return grid

         def dfs(self,x,y,border,visited,originalColor):
             isBorder=False
             direc=((0,1),(0,-1),(1,0),(-1,0))
             for dx,dy in direc:
                 nx,ny=x+dx,y+dy
                 if not (0<=nx<m and 0<=ny<n and grid[nx][ny]==originalColor):
                     isBorder=True
                 else not visited[nx][ny]:
                     self.dfs(grid,nx,ny,border,visited,originalColor)
            if isBorder:
                border.append((x,y))
                      
                    