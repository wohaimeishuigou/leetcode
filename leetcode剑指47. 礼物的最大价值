剑指 Offer 47. 礼物的最大价值
在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物

##用动态规划
class Solution:
    def maxValue(self, grid: List[List[int]]) -> int:
         for i in range(len(gird)):
             for j in range(len(grid[0])):
                  if i==0 and j==0:
                     continue
                  if i==0:##在第一行
                     grid[i][j] += grid[i][j-1]
                  elif j==0:##在第一列
                     grid[i][j] += grid[i-1][j]
                  else i!=0 and j!=0:
                     grid[i][j] += max(grid[i-1][j],grid[i][j-1])
         return grid[-1][-1]

         ###优化空间后：：
         当 gridgrid 矩阵很大时， i = 0i=0 或 j = 0j=0 的情况仅占极少数，相当循环每轮都冗余了一次判断。因此，可先初始化矩阵第一行和第一列，再开始遍历递推


         m,n=len(grid),len(grid[0])
         for i in range(1,m):
             gird[i][0] += grid[i-1][0]
         for j in range(1,n):
             grid[0][j] += grid[0][j-1]
         for i in range(1,m):
             for j in range(1,n):
                 grid[i][j] += max(grid[i-1][j],grid[i][j-1])
         return grid[-1][-1]