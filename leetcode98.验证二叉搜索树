98.验证二叉搜索树
给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。

有效 二叉搜索树定义如下：

节点的左子树只包含 小于 当前节点的数。
节点的右子树只包含 大于 当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。


####如果涉及到数值，比如最后求得：路径之和或者个数，可以向动态规划的方向考虑
如果是二叉树相关的判断问题，比如最后返回true或者false，考虑用递归或者DFS



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def helper(node,lower=float('-inf'),upper=float('inf)):
            if not node:
                return True
            val=node.val
            if val<=lower or val>=upper:
                return False
            if not helper(node.left,val,upper):
                return False
            if not helper(node.right,lower,val):
                return False
            return True
        
        return helper(root,lower=float('-inf'),upper=float('inf))

##helper(root)表示，以root为根的二叉树，其左右子树的节点的值是否在lower,upper的范围内

