547.省份数量
有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。

省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。

给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。

返回矩阵中 省份 的数量。

###并查集


class UnionFold:
    def __init__(self):
        self.father={}
        self.num_of_sets=0
    ##查找并压缩路径，压缩为深度为2
    def find(self,x)
    #查找根节点 路径压缩
        root=x
        while self.father[root]!=None:
            root=self.father[root]
        while x!=root:
            original_father=self.father[x]
            self.father[x]=root
            x=original_father
        return root
    #合并两个节点
    def merge(self,x,y):
        root_x,root_y=self.father[x],self.father[y]
        if root_x!=root_y:
            self.father[root_x]=root_y
            self.num_of_sets -= 1 ##记的数量-1
    def add(self,x):
        if x not in self.father:
            self.father[x]=None
            self.num_of_sets += 1

class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        uf=UnionFold
        for i in range(len(isConnected)):
            uf.add(i)
            for j in range(i):
                if isConnected[i][j]:
                   uf.merge(i,j)
        return uf.num_of_sets