剑指offer39.数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2


##摩尔投票法： 核心理念为 票数正负抵消 。此方法时间和空间复杂度分别为 O(N)O(N) 和 O(1)O(1) ，为本题的最佳解法。


思路：  当 票数 votes 等于 0 ，则假设当前数字 num 是众数；
    当 num = x 时，票数 votes 自增 1 ；当 num != x 时，票数 votes 自减 1 


class Solution:
    def majorityElement(self, nums: List[int]) -> int:
         votes,count=0,0
         for num in nums:
            if votes==0:
                x=num
            votes += 1 if x==num else -1
        for num in nums:
            if x==num:
                count += 1
        return x if count>len(x)//2 else 0
            