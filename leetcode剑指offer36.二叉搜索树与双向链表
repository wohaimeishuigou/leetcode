剑指offer36.二叉搜索树与双向链表：
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。
我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。

下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。

二叉搜索树的中序遍历是升序的
######
中序遍历：
def dfs(root):
    if not root: return 
    dfs(root.left)
    print(root.val)
    dfs(root.right)
#####
"""
# Definition for a Node.
class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
"""
class Solution:
    def treeToDoublyList(self, root: 'Node') -> 'Node':
        def dfs(cur):
            if not cur:return
            dfs(cur.left)###递归左子树
            if self.pre:##修改节点指针
                self.pre.right,cur.left=cur,self.pre
            else:
                self.head=cur#记录头节点
            self.pre=cur
            dfs(cur.right)##递归右子树
        
        if not root:return
        self.pre=None
        dfs(root)
        self.pre.right,self.head.left=self.head,self.pre
        return self.head