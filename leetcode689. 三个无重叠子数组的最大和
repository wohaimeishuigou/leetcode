689. 三个无重叠子数组的最大和
给你一个整数数组 nums 和一个整数 k ，找出三个长度为 k 、互不重叠、且 3 * k 项的和最大的子数组，并返回这三个子数组。

以下标的数组形式返回结果，数组中的每一项分别指示每个子数组的起始位置（下标从 0 开始）。如果有多个结果，返回字典序最小的一个。
输入：nums = [1,2,1,2,6,7,5,1], k = 2
输出：[0,3,5]
解释：子数组 [1, 2], [2, 6], [7, 5] 对应的起始下标为 [0, 3, 5]。
也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。

###滑动窗口

class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        #一个滑动窗口：
        ans=[]
        sum1,maxsum1=0,0
        for i in range(len(nums)):
            sum1 += nums[i]
            if i>k-1:
               if sum1>maxsum1:
                  maxsum1=sum1
                  ans=[i-k+1]
               sum1 -= nums[i-k+1]
        return ans
        ###这道题用三个滑动窗口
        ans=[]
        sum1,maxsum1,maxsum1Index=0,0,0
        sum2,maxsum2,maxsum2Index=0,0,()
        sum3,total=0,0
        for i in range(2*k,len(nums)):
            sum1 += nums[i-2*k]
            sum2 += nums[i-k]
            sum3 += nums[i]
            if i>=(2*k-1):
                if sum1>maxsum1:
                   maxsum1=sum1
                   maxsum1Index=i-3*k+1
                if maxsum1+sum2>maxsum2:
                   maxsum2=maxsum1+sum2
                   maxsum2Index=(maxsum1Index,i-2*k+1)
                if maxsum2+sum3>total:
                   total=maxsum2+sum3
                   ans=[*(maxsum2Index),i-k+1]
                sum1 -=nums[i-3*k+1]
                sum2 -=nums[i-2*k+1]
                sum3 -=nums[i-k+1]
        return ans
                