647.回文子串
给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。

回文字符串 是正着读和倒过来读一样的字符串。
子字符串 是字符串中的由连续字符组成的一个序列。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

输入：s = "aaa"
输出：6
解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"


######确定递推公式
在确定递推公式时，就要分析如下几种情况。

整体上是两种，就是s[i]与s[j]相等，s[i]与s[j]不相等这两种。

当s[i]与s[j]不相等，那没啥好说的了，dp[i][j]一定是false。

当s[i]与s[j]相等时，这就复杂一些了，有如下三种情况

情况一：下标i 与 j相同，同一个字符例如a，当然是回文子串
情况二：下标i 与 j相差为1，例如aa，也是文子串
情况三：下标：i 与 j相差大于1的时候，例如cabac，此时s[i]与s[j]已经相同了，我们看i到j区间是不是回文子串就看aba是不是回文就可以了，那么aba的区间就是 i+1 与 j-1区间，这个区间是不是回文就看dp[i + 1][j - 1]是否为true



class Solution:
    def countSubstrings(self, s: str) -> int:
        result=0
        length=len(s)
        dp=[[False]*length for _ in range(length)]
        for i in range(length-1,-1,-1):#这道题因为j是大于i的，所以对于dp矩阵，只填充右半边
            for j in range(i,length):
                if s[i]==s[j]:
                   if j-i<=1:##情况一和情况二
                       result += 1
                       dp[i][j]=True
                   elif dp[i+1][j-1]:情况三
                       result += 1
                       dp[i][j]=True
        return result
