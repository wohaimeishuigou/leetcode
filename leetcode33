⚠️🚭‼️###将数组一分为二，其中一定有一个是有序的，另一个可能是有序，也能是部分有序。
###此时有序部分用二分法查找。无序部分再一分为二，其中一个一定有序，另一个可能有序，可能无序。就这样循环. 

搜索排序旋转数组
整数数组 nums 按升序排列，数组中的值 互不相同 。
在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了旋转，
使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。
例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums:
           return -1
        left,right=0,len(nums)-1
        while left<=right:
        mid=(left+right)//2
        if nums[mid]==target:
           return mid
        if nums[0]<=nums[mid]:#这个循环用来找二分后有序的那部分，因为二分后其中一个一定是有序的
           if nums[0]<=target<nums[mid]:#这里和nums[mid]不能有等号，包括下面的和nums[mid]的比较也是，不能有等号，因为等号已经在上面的if语句里取过了
              ight=mid-1
            else:
              left=mid+1
        else:
           if nums[mid]<target<=nums[len(nums)-1]:
              left=mid+1
           else:
              right=mid-1
       return -1 


 

