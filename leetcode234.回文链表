234.回文链表
给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head:
            return true
        # 找到前半部分链表的尾节点并反转后半部分链表
        first_half_end=self.end_of_first_half(head)
        second_half_start=self.reverselist(first_half_end.next)
      ###判断是否回文
        result=True
        firstposition=head
        secondposition= second_half_start

        while result and secondposition is not None:
              if firstposition!=secondposition:
                  result=false
                  return result
              firstposition,secondposition=firstposition.next,secondposition.next
      ###将链表返回原样，还原之
        first_half_end.next=self.reverselist(second_half_start)
        return result
        
        ##将链表从中间一分两半，返回的是指向第一半尾结点的指针
        def end_of_first_half(self,head):
            fast=head
            slow=head
            while fast.next is not None and fast.next.next is not None:
                  fast,slow=fast.next.next,slow.next
            return slow
        ##翻转后半段链表，返回的是prev 指向翻转链表的头结点
        def reverselist(self,head):
            current=head
            prev=None
            if current is not None:###如果有current.next is not None 的判断，那么差最后一个节点无法翻转
               node_next=current.next
               current.next=prev
               prev=current
               current=node_next
            return prev


            

    