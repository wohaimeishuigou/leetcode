102.二叉树的层序遍历
给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。


##二叉树的DFS
##DFS隐含栈
dfs(self,root:TreeNode):
    if not root:
       return
    dfs(root.left)
    dfs(root.right)
##二叉树的BFS
##BFS要借助队列实现
bfs(self,root:TreeNode):
    queue=[root]
    while queue:
       node=queue.pop(0)
       if not root:
          return
       if root.left:
          bfs(root.left)
       if root.right:
          bfs(root.right)



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
           return []
        queue=[root]
        res=[]
        while queue:
           length=len(queue)##在每一层遍历开始前，记录当前层节点的个数，然后一口气处理完这一层的节点
           level=[]
           for i in range(length):
               node=queue.pop(0)
               level.append(node.val)
               if node.left:
                  queue.append(node.left)
               if node.right:
                  queue.append(node.right)
            res.append(level)
        return res